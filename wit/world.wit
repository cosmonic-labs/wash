package wasmcloud:wash@0.0.1;

interface types {
    /// Hook types that can be registered by plugins
    /// Hooks are executed at specific times during the wash lifecycle
    /// and can be used to modify behavior, perform preflight checks, or handle errors.
    enum hook-type {
        /// Default fallback
        unknown,
        /// Called before `wash doctor` runs, useful for preflight checks for plugins
        before-doctor,
        /// Called after `wash doctor` runs, useful to examine results and offer recommendations
        after-doctor,
        /// Called before `wash build` runs
        before-build,
        /// Called after `wash build` runs
        after-build,
        /// Called before `wash push` runs
        before-push,
        /// Called after `wash push` runs
        after-push,
        /// Called before `wash dev` runs and starts the development loop
        before-dev,
        /// Called after `wash dev` ends the development loop
        after-dev,
        /// Called to register a component's exports for use in `wash dev`
        dev-register,
    }

    /// Used for flags and arguments in commands
    /// Flags are registered as `wash <plugin-name> <command-name> --<flag-name> <flag-value>`
    /// Arguments are registered in order as `wash <plugin-name> <command-name> <arg1-value> <arg2-value>`
    /// 
    /// Flags and arguments can be optional, and the final value is populated by the CLI parser. If you set default to None,
    /// then the final value should always be Some(value) before the command is executed. This should still be validated.
    record command-argument {
        /// Human readable name for the argument
        name: string,
        /// Short description of the argument
        description: string,
        /// An environment variable that can be used to set this argument. It's strongly recommended to namespace
        /// this value to avoid conflicts with other plugins.
        env: option<string>,
        /// Default value, if any. If omitted, the argument is required. If present, the argument is optional.
        default: option<string>,
        /// Final value for this argument, populated by the CLI parser.
        value: option<string>,
    }

    /// A command is a registered action that can be executed by the user.
    /// Commands are registered as `wash <plugin-name> <command-name>`, and can have flags and arguments.
    record command {
        /// Unique identifier for the command, usually the same as the command name
        id: string,
        /// The command name, registered as `wash <plugin-name> <command-name>`
        name: string,
        /// Short human-friendly description of the command
        description: string,
        /// Command flags, registered as `wash <plugin-name> <command-name> --<flag-name> <flag-value>`
        %flags: list<tuple<string, command-argument>>,
        /// Command positional arguments, registered in order as `wash <plugin-name> <command-name> <arg1-value> <arg2-value>`
        arguments: list<command-argument>,
        /// List of sample command usage
        usage: list<string>,
    }

    /// Metadata for a plugin, used to register the plugin with wash.
    /// This metadata is used to display information about the plugin in the CLI and to register this plugins
    /// place in the wash command lifecycle, including commands and hooks.
    record metadata {
        /// Internal Unique identifier for the plugin
        /// e.g. `dev.wasmcloud.oci`
        id: string,
        /// The plugin name as referred to in the CLI. For this reason, this name should not contain spaces or special characters.
        /// Ex: "oci"
        name: string,
        /// Short human-friendly description of the plugin
        description: string,
        /// The plugin author contact information
        /// This is usually a name and email address
        /// Ex: "WasmCloud Team <team@wasmcloud.dev>"
        contact: string,
        /// Source or Documentation URL for the Plugin
        /// Ex: https://github.com/wasmcloud/wash-oci-plugin
        url: string,
        /// The plugin license
        /// Ex: "Apache-2.0"
        license: string,
        /// The plugin version
        /// Ex: "0.1.0"
        version: string,
        /// The top level command for this plugin.
        /// If set, this plugin will be registered as 'wash <plugin-name>' and will not have a command name.
        /// If omitted, this plugin will be registered as 'wash <plugin-name> <command-name>' for each
        /// command in the `sub-commands` list.
        command: option<command>,
        /// All subcommands for this plugin. If `command` is set, this list should be empty and will be ignored.
        sub-commands: list<command>,
        /// Hooks to register for this plugin. This list opts a plugin into the wash command lifecycle
        hooks: list<hook-type>,
    }

    /// Plugin config is a key/value store that can be used to share information between instances of the plugin.
    /// This is useful for passing information between commands and hooks, or for storing state that's accessed
    /// across multiple invocations of the plugin.
    /// 
    /// Plugin config key/value pairs are available both in this object and through wasi:config/runtime calls.
    /// 
    /// This is a global store for all instances of the plugin and race contentions should be handled with care.
    /// The contents of the store are not persisted after wash's execution ends.
    resource plugin-config {
        /// Get the value for a given key in the plugin config.
        get: func(key: string) -> option<string>;
        /// Set the value for a given plugin config key. Returns the value if it already existed, or none if it was newly created.
        set: func(key: string, value: string) -> option<string>;
        /// Delete the value for a given key in the plugin config, if it exists.
        /// Returns the deleted value if it existed, or none if it did not.
        delete: func(key: string) -> option<string>;
        /// List all keys in the plugin config.
        %list: func() -> list<string>;
    }

    // TODO: determine if we should have wash and project config
    resource project-config {
        // Absolute path to user wash config
        // Ex: /home/user/.config/wash/wash.toml
        // wash-config-path: func() -> string;
        // Absolute path to wasmcloud.toml (if running in a project)
        // Ex: /home/user/projects/my-project/wasmcloud.toml
        // project-path: func() -> result<string>;
        // Retrieves a key/value pair from the wasmcloud.toml project configuration.
        // If the key does not exist, the default value is returned.
        // Ex: project-config-get("component.name", "component") -> "my-component-name-from-wasmcloud-toml"
        // project-config-get: func(key: string, default-value: string) -> string;
        // Retrieves a key/value pair from the wash global configuration.
        // If the key does not exist, the default value is returned.
        // Ex: wash-config-get("git.path", "/usr/bin/git") -> "/opt/homebrew/bin/git"
        // wash-config-get: func(key: string, default-value: string) -> string;
        /// Current wash version
        /// Ex: 0.39.3
        version: func() -> string;
    }

    /// Shared context between the plugin and wash, enabling both to read and write key/value pairs
    /// for dynamic behavior modification. This allows plugins to influence wash operations by updating
    /// context values (e.g., modifying OCI artifact annotations before a push).
    /// 
    /// The context is accessible to both wash and plugins during command and hook execution, supporting
    /// collaborative state changes and behavioral overrides.
    /// 
    /// Context data is not persisted beyond the current wash execution and should be treated as ephemeral.
    resource context {
        /// Get the value for a given context key.
        /// Ex: After wash build: context.get("tinygo.path") -> "/opt/homebrew/bin/tinygo"
        get: func(key: string) -> option<string>;
        /// Set the value for a given context key. Returns the value if it already existed, or none if it was newly created.
        /// Ex: Before wash push: context.set("oci.annotations", "foo=bar")
        set: func(key: string, value: string) -> option<string>;
        /// Delete the value for a given context key, if it exists. Can be used to remove keys from the context.
        /// Returns the deleted value if it existed, or none if it did not.
        /// Ex: Before wash push: context.delete("oci.password")
        delete: func(key: string) -> option<string>;
        /// List all keys in the context.
        %list: func() -> list<string>;
    }

    /// The runner resource provides access to the wash runtime and its configuration.
    /// It allows plugins to interact with the wash environment, execute commands, and manage configuration.
    resource runner {
        /// Project configuration is provided when running in a project context, for example during the `build` or `dev`
        /// commands. If the plugin is not running in a project context, this will return none.
        // project-config: func() -> option<project-config>;

        /// Shared context between the plugin and wash, enabling both to read and write key/value pairs
        /// for dynamic behavior modification. This allows plugins to influence wash operations by updating
        /// context values (e.g., modifying OCI artifact annotations before a push).
        /// 
        /// The context is accessible to both wash and plugins during command and hook execution, supporting
        /// collaborative state changes and behavioral overrides.
        context: func() -> result<context, string>;

        /// Plugin config is a key/value store that can be used to share information between instances of the plugin.
        /// This is useful for passing information between commands and hooks, or for storing state that's accessed
        /// across multiple invocations of the plugin.
        /// 
        /// Plugin config key/value pairs are available both in this object and through wasi:config/runtime calls.
        /// 
        /// This is a global store for all instances of the plugin and race contentions should be handled with care.
        /// The contents of the store are not persisted after wash's execution ends.
        plugin-config: func() -> result<plugin-config, string>;

        /// Executes a host native binary on behalf of a plugin
        /// Commands are executed under 'sh -c' and inherit the environment and working directory.
        /// wash will ask the user for confirmation before executing this function.
        /// 
        /// Returns the stdout and stderr of the command as a tuple.
        host-exec: func(bin: string, args: list<string>) -> result<tuple<string, string>, string>;

        // TODO: No wasi:logging, fix this up for how we want to do output
        // User visible Output
        // For debugging, see wasi:logging
        output: func(message: string);
        // User visible Output
        // For debugging, see wasi:logging
        structured-output: func(headers: list<string>, rows: list<list<string>>);
        // Stop execution
        // wash will notify the user and execute the error hooks (if any)
        error: func(reason: string);
    }
}

interface plugin {
    use types.{metadata, runner, command, hook-type};
    /// Called by wash to retrieve the plugin metadata. It's recommended to avoid
    /// any computation or logging in this function as it's called on each command execution.
    info: func() -> metadata;
    // Instantiates the plugin.
    // The Plugin can check the context and fail if
    // information is missing or invalid (ex: incompatible wash version)
    // wash might confirm plugin execution with the user prior usage.
    // TODO: purpose of initialize?
    initialize: func(runner: runner) -> result<string, string>;
    // Executes a given command with the provided arguments
    // Commands should call `runtime.output` to control their output
    // The result indicates if the command was successful or not
    // TODO: Return command output, error as a string for feedback?
    /// Handle the execution of a given command.
    run: func(runner: runner, cmd: command) -> result<string, string>;
    /// Handle the execution of a given hook type.
    hook: func(runner: runner, hook: hook-type) -> result<string, string>;
}

/// The world for exported bindings for wash plugins.
world plugin-host {
    // Slightly weird, but the host bindings should match the plugin bindings and we don't want
    // to also include wasi:cli or wasi:logging here
    export plugin;
}

world plugin-guest {
    // tinygo requirement
    include wasi:cli/imports@0.2.0;
    // can log
    import wasi:logging/logging@0.1.0-draft;

    // Must export the plugin interface
    export plugin;

    // can read/write to the filesystem
    // import wasi:filesystem/filesystem;

    // can request interactive TTY
    // import wasi:io/streams;
}

// TODO: stop making all the worlds, only limited by wkg fetching ATM
world plugin-guest-http {
    // tinygo requirement
    include wasi:cli/imports@0.2.0;
    // can log
    import wasi:logging/logging@0.1.0-draft;
    // can get runtime config
    import wasi:config/runtime@0.2.0-draft;
    // can make outbound HTTP calls
    import wasi:http/outgoing-handler@0.2.0;

    // can setup HTTP handlers
    export wasi:http/incoming-handler@0.2.0;
    // Must export the plugin interface
    export plugin;

    // can read/write to the filesystem
    // import wasi:filesystem/filesystem;

    // can request interactive TTY
    // import wasi:io/streams;
}

world dev {
    import wasi:logging/logging@0.1.0-draft;
    import wasi:blobstore/blobstore@0.2.0-draft;
    import wasi:blobstore/container@0.2.0-draft;
    import wasi:blobstore/types@0.2.0-draft;

    export wasi:http/incoming-handler@0.2.0;
}

// A component that implements `wasi:blobstore` for dev
world blobstore-host {
    import wasi:logging/logging@0.1.0-draft;

    export plugin;
    export wasi:blobstore/blobstore@0.2.0-draft;
    export wasi:blobstore/container@0.2.0-draft;
    export wasi:blobstore/types@0.2.0-draft;
}
